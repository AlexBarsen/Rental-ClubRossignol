{"ast":null,"code":"// use createSelector from the \"reselect\" libary, so that our components won't rerender\n// if the state doesn't actuallt change, if the state values remain the same\nimport { createSelector } from \"reselect\"; // * select state.cart from state\n\nconst selectCart = state => state.cart; // selectCartItems = memoize selector\n// selectCartItems selects the cartItems from the state.cart\n\n\nexport const selectCartItems = createSelector([selectCart], cart => cart.cartItems); // selectCartItemsCount gets the cartItems from selectCartItems and then further\n// returns the reduced cartItems quantity\n\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0));\nexport const selectCartHidden = createSelector([selectCart], cart => cart.cartHidden);\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedTotal, cartItem) => accumulatedTotal + cartItem.price * cartItem.days, 0));","map":{"version":3,"sources":["/Users/barsen/Documents/WebDevelopment/Rental-ClubRossignol/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartHidden","cartHidden","selectCartTotal","accumulatedTotal","price","days"],"mappings":"AAAA;AACA;AACA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC,C,CAEA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAE1CE,IAAD,IAAUA,IAAI,CAACE,SAF4B,CAAtC,C,CAKP;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAGN,cAAc,CAChD,CAACI,eAAD,CADgD,EAE/CC,SAAD,IACEA,SAAS,CAACE,MAAV,CACE,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAFnC,EAGE,CAHF,CAH8C,CAA3C;AAUP,OAAO,MAAMC,gBAAgB,GAAGX,cAAc,CAC5C,CAACC,UAAD,CAD4C,EAE3CE,IAAD,IAAUA,IAAI,CAACS,UAF6B,CAAvC;AAKP,OAAO,MAAMC,eAAe,GAAGb,cAAc,CAAC,CAACI,eAAD,CAAD,EAAqBC,SAAD,IAC/DA,SAAS,CAACE,MAAV,CACE,CAACO,gBAAD,EAAmBL,QAAnB,KACEK,gBAAgB,GAAGL,QAAQ,CAACM,KAAT,GAAiBN,QAAQ,CAACO,IAFjD,EAGE,CAHF,CAD2C,CAAtC","sourcesContent":["// use createSelector from the \"reselect\" libary, so that our components won't rerender\n// if the state doesn't actuallt change, if the state values remain the same\nimport { createSelector } from \"reselect\";\n\n// * select state.cart from state\nconst selectCart = (state) => state.cart;\n\n// selectCartItems = memoize selector\n// selectCartItems selects the cartItems from the state.cart\nexport const selectCartItems = createSelector(\n  [selectCart],\n  (cart) => cart.cartItems\n);\n\n// selectCartItemsCount gets the cartItems from selectCartItems and then further\n// returns the reduced cartItems quantity\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  (cartItems) =>\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    )\n);\n\nexport const selectCartHidden = createSelector(\n  [selectCart],\n  (cart) => cart.cartHidden\n);\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (accumulatedTotal, cartItem) =>\n      accumulatedTotal + cartItem.price * cartItem.days,\n    0\n  )\n);\n"]},"metadata":{},"sourceType":"module"}