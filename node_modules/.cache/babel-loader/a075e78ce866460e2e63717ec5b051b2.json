{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCj3yuLXBSSvg1_LC5g13W_9IZYY1TnYds\",\n  authDomain: \"rental-clubrossignol.firebaseapp.com\",\n  projectId: \"rental-clubrossignol\",\n  storageBucket: \"rental-clubrossignol.appspot.com\",\n  messagingSenderId: \"365390353464\",\n  appId: \"1:365390353464:web:e260ab42c41afc412ec2cd\",\n  measurementId: \"G-XFKS4JRCR1\"\n};\nexport const createUserPorfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // get a reference at /users/userAuth.uid\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection(\"users\"); // get back a snapShot which tells us if the userAuth.uid\n\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  }); // snapShot.exists tells us if a user with that ID already exists (true or false)\n\n  if (!snapShot.exists) {\n    // destructure displayName and email from userAuth\n    const {\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create user with the desired that if the user does not exist\n      await userRef.set({\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndItems = (CollectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(CollectionKey);\n}; // initialize firebase\n\nfirebase.initializeApp(firebaseConfig); // get auth and firestore from firebase API\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // store googleAuthProvider\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); // function for signing in with GooglePopup -> will be used in sign-in.component\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/barsen/Documents/WebDevelopment/Rental-ClubRossignol/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserPorfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","docs","map","data","exists","email","createdAt","Date","set","error","message","addCollectionAndItems","CollectionKey","objectsToAdd","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,sCAFS;AAGrBC,EAAAA,SAAS,EAAE,sBAHU;AAIrBC,EAAAA,aAAa,EAAE,kCAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe,OAD4D,CAG3E;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB,CAL2E,CAO3E;;AACA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,IAAAA,UAAU,EAAEG,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA6BV,GAAD,IAASA,GAAG,CAACW,IAAJ,EAArC;AAAd,GAAZ,EAV2E,CAY3E;;AACA,MAAI,CAACP,QAAQ,CAACQ,MAAd,EAAsB;AACpB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYjB,QAAlB;AACA,UAAMkB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF;AACA,YAAMjB,OAAO,CAACkB,GAAR,CAAY;AAChBH,QAAAA,KADgB;AAEhBC,QAAAA,SAFgB;AAGhB,WAAGjB;AAHa,OAAZ,CAAN;AAKD,KAPD,CAOE,OAAOoB,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCS,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOpB,OAAP;AACD,CA/BM;AAiCP,OAAO,MAAMqB,qBAAqB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACpE,QAAMnB,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqBiB,aAArB,CAAtB;AACD,CAFM,C,CAIP;;AACAlC,QAAQ,CAACoC,aAAT,CAAuBnC,cAAvB,E,CAEA;;AACA,OAAO,MAAMoC,IAAI,GAAGrC,QAAQ,CAACqC,IAAT,EAAb;AACP,OAAO,MAAMxB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB,C,CAEP;;AACA,MAAMyB,QAAQ,GAAG,IAAItC,QAAQ,CAACqC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAetC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCj3yuLXBSSvg1_LC5g13W_9IZYY1TnYds\",\n  authDomain: \"rental-clubrossignol.firebaseapp.com\",\n  projectId: \"rental-clubrossignol\",\n  storageBucket: \"rental-clubrossignol.appspot.com\",\n  messagingSenderId: \"365390353464\",\n  appId: \"1:365390353464:web:e260ab42c41afc412ec2cd\",\n  measurementId: \"G-XFKS4JRCR1\",\n};\n\nexport const createUserPorfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  // get a reference at /users/userAuth.uid\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection(\"users\");\n\n  // get back a snapShot which tells us if the userAuth.uid\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\n\n  // snapShot.exists tells us if a user with that ID already exists (true or false)\n  if (!snapShot.exists) {\n    // destructure displayName and email from userAuth\n    const { email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create user with the desired that if the user does not exist\n      await userRef.set({\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndItems = (CollectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(CollectionKey);\n};\n\n// initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\n// get auth and firestore from firebase API\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// store googleAuthProvider\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\n// function for signing in with GooglePopup -> will be used in sign-in.component\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}