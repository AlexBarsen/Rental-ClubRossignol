{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCj3yuLXBSSvg1_LC5g13W_9IZYY1TnYds\",\n  authDomain: \"rental-clubrossignol.firebaseapp.com\",\n  projectId: \"rental-clubrossignol\",\n  storageBucket: \"rental-clubrossignol.appspot.com\",\n  messagingSenderId: \"365390353464\",\n  appId: \"1:365390353464:web:e260ab42c41afc412ec2cd\",\n  measurementId: \"G-XFKS4JRCR1\"\n};\nexport const createUserPorfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // get a reference at /users/userAuth.uid\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // const collectionRef = firestore.collection(\"users\");\n  // get back a snapShot which tells us if the userAuth.uid\n\n  const snapShot = await userRef.get(); // const collectionSnapshot = await collectionRef.get();\n  // console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\n  // snapShot.exists tells us if a user with that ID already exists (true or false)\n\n  if (!snapShot.exists) {\n    // destructure displayName and email from userAuth\n    const {\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create user with the desired that if the user does not exist\n      await userRef.set({\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n}; // functions which adds rental.data.js to firestore\n\nexport const addCollectionAndDocuments = async (CollectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(CollectionKey);\n  const batch = firestore.batch();\n  console.log(objectsToAdd);\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  }); // returns a promise => return null if it succedes\n\n  return await batch.commit();\n}; // initialize firebase\n\nfirebase.initializeApp(firebaseConfig); // get auth and firestore from firebase API\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // store googleAuthProvider\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); // function for signing in with GooglePopup -> will be used in sign-in.component\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/barsen/Documents/WebDevelopment/Rental-ClubRossignol/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserPorfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","CollectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,sCAFS;AAGrBC,EAAAA,SAAS,EAAE,sBAHU;AAIrBC,EAAAA,aAAa,EAAE,kCAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe,OAD4D,CAG3E;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAJ2E,CAM3E;AAEA;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAT2E,CAW3E;AACA;AAEA;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYT,QAAlB;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF;AACA,YAAMT,OAAO,CAACU,GAAR,CAAY;AAChBH,QAAAA,KADgB;AAEhBC,QAAAA,SAFgB;AAGhB,WAAGT;AAHa,OAAZ,CAAN;AAKD,KAPD,CAOE,OAAOY,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOd,OAAP;AACD,CAjCM,C,CAmCP;;AACA,OAAO,MAAMe,yBAAyB,GAAG,OACvCC,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMC,aAAa,GAAGjB,SAAS,CAACkB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGnB,SAAS,CAACmB,KAAV,EAAd;AAEAR,EAAAA,OAAO,CAACC,GAAR,CAAYI,YAAZ;AACAA,EAAAA,YAAY,CAACI,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAMC,SAAS,GAAGL,aAAa,CAAChB,GAAd,EAAlB;AACAkB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAqBD,GAArB;AACD,GAHD,EANG,CAWH;;AACA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACD,CAhBM,C,CAkBP;;AACApC,QAAQ,CAACqC,aAAT,CAAuBpC,cAAvB,E,CAEA;;AACA,OAAO,MAAMqC,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMzB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB,C,CAEP;;AACA,MAAM0B,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAevC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCj3yuLXBSSvg1_LC5g13W_9IZYY1TnYds\",\n  authDomain: \"rental-clubrossignol.firebaseapp.com\",\n  projectId: \"rental-clubrossignol\",\n  storageBucket: \"rental-clubrossignol.appspot.com\",\n  messagingSenderId: \"365390353464\",\n  appId: \"1:365390353464:web:e260ab42c41afc412ec2cd\",\n  measurementId: \"G-XFKS4JRCR1\",\n};\n\nexport const createUserPorfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  // get a reference at /users/userAuth.uid\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  // const collectionRef = firestore.collection(\"users\");\n\n  // get back a snapShot which tells us if the userAuth.uid\n  const snapShot = await userRef.get();\n\n  // const collectionSnapshot = await collectionRef.get();\n  // console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\n\n  // snapShot.exists tells us if a user with that ID already exists (true or false)\n  if (!snapShot.exists) {\n    // destructure displayName and email from userAuth\n    const { email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create user with the desired that if the user does not exist\n      await userRef.set({\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\n// functions which adds rental.data.js to firestore\nexport const addCollectionAndDocuments = async (\n  CollectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(CollectionKey);\n\n  const batch = firestore.batch();\n\n  console.log(objectsToAdd);\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  // returns a promise => return null if it succedes\n  return await batch.commit();\n};\n\n// initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\n// get auth and firestore from firebase API\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// store googleAuthProvider\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\n// function for signing in with GooglePopup -> will be used in sign-in.component\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}