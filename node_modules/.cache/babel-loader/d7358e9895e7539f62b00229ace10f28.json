{"ast":null,"code":"import { createSelector } from \"reselect\"; // * select just rental from state\n// * -> { rental: { rentals: [ { id, categoryName, products: [] }, { ... } ] } }\n\nconst selectRental = state => state.rental; // * select rentals object from state.rental\n// * -> { rentals: [ { id, categoryName, products [] }, { ... } ] }\n\n\nexport const selectRentals = createSelector([selectRental], rental => rental.rentals); // * .map() returns Object -> { id, categoryName , products: [] }\n// * so basically returns an array of objects\n// * -> [ { id: 1, categoryName: \"Ski\", products: [] },\n// *      { id: 2, categoryName: \"Snow\", products: [] },\n// *      { ... } ]\n// * if rentals are \"null\" it returns an empty []\n\nexport const selectRentalsArray = createSelector([selectRentals], rentals => rentals ? Object.keys(rentals).map(key => rentals[key]) : []);\nexport const isRentalFetching = createSelector([selectRentals], rentals => rental.isFetching);","map":{"version":3,"sources":["/Users/barsen/Documents/WebDevelopment/Rental-ClubRossignol/src/redux/rental/rental.selectors.js"],"names":["createSelector","selectRental","state","rental","selectRentals","rentals","selectRentalsArray","Object","keys","map","key","isRentalFetching","isFetching"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;AACA;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAWA,KAAK,CAACC,MAAtC,C,CAEA;AACA;;;AACA,OAAO,MAAMC,aAAa,GAAGJ,cAAc,CACzC,CAACC,YAAD,CADyC,EAExCE,MAAD,IAAYA,MAAM,CAACE,OAFsB,CAApC,C,CAKP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAGN,cAAc,CAAC,CAACI,aAAD,CAAD,EAAmBC,OAAD,IAChEA,OAAO,GAAGE,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,GAArB,CAA0BC,GAAD,IAASL,OAAO,CAACK,GAAD,CAAzC,CAAH,GAAqD,EADd,CAAzC;AAIP,OAAO,MAAMC,gBAAgB,GAAGX,cAAc,CAC5C,CAACI,aAAD,CAD4C,EAE3CC,OAAD,IAAaF,MAAM,CAACS,UAFwB,CAAvC","sourcesContent":["import { createSelector } from \"reselect\";\n\n// * select just rental from state\n// * -> { rental: { rentals: [ { id, categoryName, products: [] }, { ... } ] } }\nconst selectRental = (state) => state.rental;\n\n// * select rentals object from state.rental\n// * -> { rentals: [ { id, categoryName, products [] }, { ... } ] }\nexport const selectRentals = createSelector(\n  [selectRental],\n  (rental) => rental.rentals\n);\n\n// * .map() returns Object -> { id, categoryName , products: [] }\n// * so basically returns an array of objects\n// * -> [ { id: 1, categoryName: \"Ski\", products: [] },\n// *      { id: 2, categoryName: \"Snow\", products: [] },\n// *      { ... } ]\n// * if rentals are \"null\" it returns an empty []\nexport const selectRentalsArray = createSelector([selectRentals], (rentals) =>\n  rentals ? Object.keys(rentals).map((key) => rentals[key]) : []\n);\n\nexport const isRentalFetching = createSelector(\n  [selectRentals],\n  (rentals) => rental.isFetching\n);\n"]},"metadata":{},"sourceType":"module"}