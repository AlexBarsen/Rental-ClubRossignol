{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\"; // * configuration object containing keys  and identifiers for the app\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCj3yuLXBSSvg1_LC5g13W_9IZYY1TnYds\",\n  authDomain: \"rental-clubrossignol.firebaseapp.com\",\n  projectId: \"rental-clubrossignol\",\n  storageBucket: \"rental-clubrossignol.appspot.com\",\n  messagingSenderId: \"365390353464\",\n  appId: \"1:365390353464:web:e260ab42c41afc412ec2cd\",\n  measurementId: \"G-XFKS4JRCR1\"\n}; // * initialize firebase\n\nfirebase.initializeApp(firebaseConfig); // * get/connect auth and firestore from firebase API\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // * createUserProfileDocument() = async await function which creates a new user if it doesn’t already exists\n\nexport const createUserPorfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // * get a reference at /users/userAuth.uid (reference the user colllection)\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // * get snapShot of the userRef\n\n  const snapShot = await userRef.get(); // const collectionSnapshot = await collectionRef.get();\n  // console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\n  // * if the Snapshot doesn’t exist, then destructure the email of userAuth() and proceed with creating the user document\n\n  if (!snapShot.exists) {\n    const {\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //*  create document with user data in the userRef(“/users”) collection\n      await userRef.set({\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n}; // * function which adds rental.data.js to firestore\n\nexport const addCollectionAndDocuments = async (CollectionKey, objectsToAdd) => {\n  // * firestore collection reference\n  const collectionRef = firestore.collection(CollectionKey); // * groups all callls into a single object\n\n  const batch = firestore.batch(); // * function which creates a document for each object (in rentals) in firestore\n\n  objectsToAdd.forEach(obj => {\n    // * reference to document from the collection\n    const newDocRef = collectionRef.doc(); // * firestore will automatically set an ID\n    // * create document at 'newDocRef' with the 'object'\n\n    batch.set(newDocRef, obj);\n  }); // * batch.commit() returns null if the the .set() succeeds\n\n  return await batch.commit();\n};\nexport const convertRentalsSnapshotToMap = rentals => {\n  const transformedRentals = rentals.docs.map(doc => {\n    const {\n      categoryName,\n      products\n    } = doc.data();\n    return {\n      id: doc.id,\n      categoryName,\n      products\n    };\n  });\n  return transformedRentals.reduce((accumulator, rentals) => {\n    accumulator[rentals.categoryName.toLowerCase()] = rentals;\n    return accumulator;\n  }, {});\n}; // * googleSignIn with PopUp\n// store googleAuthProvider\n// const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: \"select_account\" });\n// function for signing in with GooglePopup -> will be used in sign-in.component\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;","map":{"version":3,"sources":["/Users/barsen/Documents/WebDevelopment/Rental-ClubRossignol/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserPorfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","CollectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertRentalsSnapshotToMap","rentals","transformedRentals","docs","map","categoryName","products","data","id","reduce","accumulator","toLowerCase"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\n// * configuration object containing keys  and identifiers for the app\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCj3yuLXBSSvg1_LC5g13W_9IZYY1TnYds\",\n  authDomain: \"rental-clubrossignol.firebaseapp.com\",\n  projectId: \"rental-clubrossignol\",\n  storageBucket: \"rental-clubrossignol.appspot.com\",\n  messagingSenderId: \"365390353464\",\n  appId: \"1:365390353464:web:e260ab42c41afc412ec2cd\",\n  measurementId: \"G-XFKS4JRCR1\",\n};\n\n// * initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\n// * get/connect auth and firestore from firebase API\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// * createUserProfileDocument() = async await function which creates a new user if it doesn’t already exists\nexport const createUserPorfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  // * get a reference at /users/userAuth.uid (reference the user colllection)\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  // * get snapShot of the userRef\n  const snapShot = await userRef.get();\n\n  // const collectionSnapshot = await collectionRef.get();\n  // console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\n\n  // * if the Snapshot doesn’t exist, then destructure the email of userAuth() and proceed with creating the user document\n  if (!snapShot.exists) {\n    const { email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //*  create document with user data in the userRef(“/users”) collection\n      await userRef.set({\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\n// * function which adds rental.data.js to firestore\nexport const addCollectionAndDocuments = async (\n  CollectionKey,\n  objectsToAdd\n) => {\n  // * firestore collection reference\n  const collectionRef = firestore.collection(CollectionKey);\n\n  // * groups all callls into a single object\n  const batch = firestore.batch();\n\n  // * function which creates a document for each object (in rentals) in firestore\n  objectsToAdd.forEach((obj) => {\n    // * reference to document from the collection\n    const newDocRef = collectionRef.doc(); // * firestore will automatically set an ID\n\n    // * create document at 'newDocRef' with the 'object'\n    batch.set(newDocRef, obj);\n  });\n\n  // * batch.commit() returns null if the the .set() succeeds\n  return await batch.commit();\n};\n\nexport const convertRentalsSnapshotToMap = (rentals) => {\n  const transformedRentals = rentals.docs.map((doc) => {\n    const { categoryName, products } = doc.data();\n\n    return {\n      id: doc.id,\n      categoryName,\n      products,\n    };\n  });\n\n  return transformedRentals.reduce((accumulator, rentals) => {\n    accumulator[rentals.categoryName.toLowerCase()] = rentals;\n    return accumulator;\n  }, {});\n};\n\n// * googleSignIn with PopUp\n// store googleAuthProvider\n// const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: \"select_account\" });\n\n// function for signing in with GooglePopup -> will be used in sign-in.component\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}