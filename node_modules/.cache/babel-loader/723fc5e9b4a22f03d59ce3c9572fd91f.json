{"ast":null,"code":"import RentalActionTypes from \"./rental.types\"; // * initialize state\n\nconst INITIAL_STATE = {\n  rentals: null,\n  isFetching: false,\n  errorMessage: undefined\n}; // * reducers take in a current state + action -> return a new state\n\nconst rentalReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case RentalActionTypes.FETCH_RENTALS_START:\n      return { ...state,\n        isFetching: true\n      };\n\n    case RentalActionTypes.FETCH_RENTALS_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        rentals: action.payload\n      };\n\n    case RentalActionTypes.FETCH_RENTALS_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        errorMessage: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rentalReducer;","map":{"version":3,"sources":["/Users/barsen/Documents/WebDevelopment/Rental-ClubRossignol/src/redux/rental/rental.reducer.js"],"names":["RentalActionTypes","INITIAL_STATE","rentals","isFetching","errorMessage","undefined","rentalReducer","state","action","type","FETCH_RENTALS_START","FETCH_RENTALS_SUCCESS","payload"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,gBAA9B,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,IADW;AAEpBC,EAAAA,UAAU,EAAE,KAFQ;AAGpBC,EAAAA,YAAY,EAAEC;AAHM,CAAtB,C,CAMA;;AACA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGN,aAAT,EAAwBO,MAAxB,KAAmC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,iBAAiB,CAACU,mBAAvB;AACE,aAAO,EACL,GAAGH,KADE;AAELJ,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAKH,iBAAiB,CAACW,qBAAvB;AACE,aAAO,EACL,GAAGJ,KADE;AAELJ,QAAAA,UAAU,EAAE,KAFP;AAGLD,QAAAA,OAAO,EAAEM,MAAM,CAACI;AAHX,OAAP;;AAKF,SAAKZ,iBAAiB,CAACW,qBAAvB;AACE,aAAO,EACL,GAAGJ,KADE;AAELJ,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,YAAY,EAAEI,MAAM,CAACI;AAHhB,OAAP;;AAKF;AACE,aAAOL,KAAP;AAnBJ;AAqBD,CAtBD;;AAwBA,eAAeD,aAAf","sourcesContent":["import RentalActionTypes from \"./rental.types\";\n\n// * initialize state\nconst INITIAL_STATE = {\n  rentals: null,\n  isFetching: false,\n  errorMessage: undefined,\n};\n\n// * reducers take in a current state + action -> return a new state\nconst rentalReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case RentalActionTypes.FETCH_RENTALS_START:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RentalActionTypes.FETCH_RENTALS_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        rentals: action.payload,\n      };\n    case RentalActionTypes.FETCH_RENTALS_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        errorMessage: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rentalReducer;\n"]},"metadata":{},"sourceType":"module"}